/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.2.0 (2020-02-13)
 */
(function () {
    'use strict';

    var Cell = function (initial) {
        var value = initial;
        var get = function () {
            return value;
        };
        var set = function (v) {
            value = v;
        };
        var clone = function () {
            return Cell(get());
        };
        return {
            get: get,
            set: set,
            clone: clone
        };
    };

    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');

    var get = function (customTabs) {
        var addTab = function (spec) {
            var currentCustomTabs = customTabs.get();
            currentCustomTabs[spec.name] = spec;
            customTabs.set(currentCustomTabs);
        };
        return {addTab: addTab};
    };

    var register = function (editor, dialogOpener) {
        editor.addCommand('mceHelp', dialogOpener);
    };
    var Commands = {register: register};

    var register$1 = function (editor, dialogOpener) {
        editor.ui.registry.addButton('help2', {
            icon: 'help',
            tooltip: 'Help',
            onAction: dialogOpener
        });
        editor.ui.registry.addMenuItem('help2', {
            text: 'Help',
            icon: 'help',
            shortcut: 'Alt+0',
            onAction: dialogOpener
        });
    };
    var Buttons = {register: register$1};

    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var noop = function () {
    };
    var constant = function (value) {
        return function () {
            return value;
        };
    };

    function curry(fn) {
        var initialArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            initialArgs[_i - 1] = arguments[_i];
        }
        return function () {
            var restArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                restArgs[_i] = arguments[_i];
            }
            var all = initialArgs.concat(restArgs);
            return fn.apply(null, all);
        };
    }

    var not = function (f) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return !f.apply(null, args);
        };
    };
    var never = constant(false);
    var always = constant(true);

    var none = function () {
        return NONE;
    };
    var NONE = function () {
        var eq = function (o) {
            return o.isNone();
        };
        var call = function (thunk) {
            return thunk();
        };
        var id = function (n) {
            return n;
        };
        var me = {
            fold: function (n, s) {
                return n();
            },
            is: never,
            isSome: never,
            isNone: always,
            getOr: id,
            getOrThunk: call,
            getOrDie: function (msg) {
                throw new Error(msg || 'error: getOrDie called on none.');
            },
            getOrNull: constant(null),
            getOrUndefined: constant(undefined),
            or: id,
            orThunk: call,
            map: none,
            each: noop,
            bind: none,
            exists: never,
            forall: always,
            filter: none,
            equals: eq,
            equals_: eq,
            toArray: function () {
                return [];
            },
            toString: constant('none()')
        };
        if (Object.freeze) {
            Object.freeze(me);
        }
        return me;
    }();
    var some = function (a) {
        var constant_a = constant(a);
        var self = function () {
            return me;
        };
        var bind = function (f) {
            return f(a);
        };
        var me = {
            fold: function (n, s) {
                return s(a);
            },
            is: function (v) {
                return a === v;
            },
            isSome: always,
            isNone: never,
            getOr: constant_a,
            getOrThunk: constant_a,
            getOrDie: constant_a,
            getOrNull: constant_a,
            getOrUndefined: constant_a,
            or: self,
            orThunk: self,
            map: function (f) {
                return some(f(a));
            },
            each: function (f) {
                f(a);
            },
            bind: bind,
            exists: bind,
            forall: bind,
            filter: function (f) {
                return f(a) ? me : NONE;
            },
            toArray: function () {
                return [a];
            },
            toString: function () {
                return 'some(' + a + ')';
            },
            equals: function (o) {
                return o.is(a);
            },
            equals_: function (o, elementEq) {
                return o.fold(never, function (b) {
                    return elementEq(a, b);
                });
            }
        };
        return me;
    };
    var from = function (value) {
        return value === null || value === undefined ? NONE : some(value);
    };
    var Option = {
        some: some,
        none: none,
        from: from
    };

    var typeOf = function (x) {
        if (x === null) {
            return 'null';
        }
        var t = typeof x;
        if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {
            return 'array';
        }
        if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {
            return 'string';
        }
        return t;
    };
    var isType = function (type) {
        return function (value) {
            return typeOf(value) === type;
        };
    };
    var isFunction = isType('function');

    var nativeSlice = Array.prototype.slice;
    var nativeIndexOf = Array.prototype.indexOf;
    var rawIndexOf = function (ts, t) {
        return nativeIndexOf.call(ts, t);
    };
    var indexOf = function (xs, x) {
        var r = rawIndexOf(xs, x);
        return r === -1 ? Option.none() : Option.some(r);
    };
    var contains = function (xs, x) {
        return rawIndexOf(xs, x) > -1;
    };
    var map = function (xs, f) {
        var len = xs.length;
        var r = new Array(len);
        for (var i = 0; i < len; i++) {
            var x = xs[i];
            r[i] = f(x, i);
        }
        return r;
    };
    var filter = function (xs, pred) {
        var r = [];
        for (var i = 0, len = xs.length; i < len; i++) {
            var x = xs[i];
            if (pred(x, i)) {
                r.push(x);
            }
        }
        return r;
    };
    var find = function (xs, pred) {
        for (var i = 0, len = xs.length; i < len; i++) {
            var x = xs[i];
            if (pred(x, i)) {
                return Option.some(x);
            }
        }
        return Option.none();
    };
    var from$1 = isFunction(Array.from) ? Array.from : function (x) {
        return nativeSlice.call(x);
    };

    var keys = Object.keys;
    var hasOwnProperty = Object.hasOwnProperty;
    var get$1 = function (obj, key) {
        return has(obj, key) ? Option.from(obj[key]) : Option.none();
    };
    var has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
    };

    var cat = function (arr) {
        var r = [];
        var push = function (x) {
            r.push(x);
        };
        for (var i = 0; i < arr.length; i++) {
            arr[i].each(push);
        }
        return r;
    };

    var getHelpTabs = function (editor) {
        return Option.from(editor.getParam('help_tabs'));
    };

    var shortcuts = [
        {
            shortcuts: ['Meta + B'],
            action: 'Bold'
        },
        {
            shortcuts: ['Meta + I'],
            action: 'Italic'
        },
        {
            shortcuts: ['Meta + U'],
            action: 'Underline'
        },
        {
            shortcuts: ['Meta + A'],
            action: 'Select all'
        },
        {
            shortcuts: [
                'Meta + Y',
                'Meta + Shift + Z'
            ],
            action: 'Redo'
        },
        {
            shortcuts: ['Meta + Z'],
            action: 'Undo'
        },
        {
            shortcuts: ['Access + 1'],
            action: 'Header 1'
        },
        {
            shortcuts: ['Access + 2'],
            action: 'Header 2'
        },
        {
            shortcuts: ['Access + 3'],
            action: 'Header 3'
        },
        {
            shortcuts: ['Access + 4'],
            action: 'Header 4'
        },
        {
            shortcuts: ['Access + 5'],
            action: 'Header 5'
        },
        {
            shortcuts: ['Access + 6'],
            action: 'Header 6'
        },
        {
            shortcuts: ['Access + 7'],
            action: 'Paragraph'
        },
        {
            shortcuts: ['Access + 8'],
            action: 'Div'
        },
        {
            shortcuts: ['Access + 9'],
            action: 'Address'
        },
        {
            shortcuts: ['Alt + 0'],
            action: 'Open help dialog'
        },
        {
            shortcuts: ['Alt + F9'],
            action: 'Focus to menubar'
        },
        {
            shortcuts: ['Alt + F10'],
            action: 'Focus to toolbar'
        },
        {
            shortcuts: ['Alt + F11'],
            action: 'Focus to element path'
        },
        {
            shortcuts: ['Ctrl + F9'],
            action: 'Focus to contextual toolbar'
        },
        {
            shortcuts: ['Shift + Enter'],
            action: 'Open popup menu for split buttons'
        },
        {
            shortcuts: ['Meta + K'],
            action: 'Insert link'
        },
        {
            shortcuts: ['Meta + S'],
            action: 'Save'
        },
        {
            shortcuts: ['Meta + F'],
            action: 'Find'
        },
        /*{
            shortcuts: ['Meta + Shift + F'],
            action: 'Switch to or from fullscreen mode'
        }*/
    ];
    var KeyboardShortcuts = {shortcuts: shortcuts};

    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');

    var convertText = function (source) {
        var mac = {
            alt: '&#x2325;',
            ctrl: '&#x2303;',
            shift: '&#x21E7;',
            meta: '&#x2318;',
            access: '&#x2303;&#x2325;'
        };
        var other = {
            meta: 'Ctrl ',
            access: 'Shift + Alt '
        };
        var replace = global$1.mac ? mac : other;
        var shortcut = source.split('+');
        var updated = map(shortcut, function (segment) {
            var search = segment.toLowerCase().trim();
            return has(replace, search) ? replace[search] : segment;
        });
        return global$1.mac ? updated.join('').replace(/\s/, '') : updated.join('+');
    };
    var ConvertShortcut = {convertText: convertText};

    var tab = function () {
        var shortcutList = map(KeyboardShortcuts.shortcuts, function (shortcut) {
            var shortcutText = map(shortcut.shortcuts, ConvertShortcut.convertText).join(' or ');
            return [
                shortcut.action,
                shortcutText
            ];
        });
        var tablePanel = {
            type: 'table',
            header: [
                'Action',
                'Shortcut'
            ],
            cells: shortcutList
        };
        return {
            name: 'shortcuts',
            title: 'Handy Shortcuts',
            items: [tablePanel]
        };
    };
    var KeyboardShortcutsTab = {tab: tab};

    var supplant = function (str, obj) {
        var isStringOrNumber = function (a) {
            var t = typeof a;
            return t === 'string' || t === 'number';
        };
        return str.replace(/\$\{([^{}]*)\}/g, function (fullMatch, key) {
            var value = obj[key];
            return isStringOrNumber(value) ? value.toString() : fullMatch;
        });
    };

    var parseHelpTabsSetting = function (tabsFromSettings, tabs) {
        var newTabs = {};
        var names = map(tabsFromSettings, function (t) {
            if (typeof t === 'string') {
                if (has(tabs, t)) {
                    newTabs[t] = tabs[t];
                }
                return t;
            } else {
                newTabs[t.name] = t;
                return t.name;
            }
        });
        return {
            tabs: newTabs,
            names: names
        };
    };
    var getNamesFromTabs = function (tabs) {
        var names = keys(tabs);
        var versionsIdx = indexOf(names, 'versions');
        versionsIdx.each(function (idx) {
            names.splice(idx, 1);
            names.push('versions');
        });
        return {
            tabs: tabs,
            names: names
        };
    };
    var parseCustomTabs = function (editor, customTabs) {
        var _a;
        var shortcuts = KeyboardShortcutsTab.tab();
        var tabs = __assign((_a = {}, _a[shortcuts.name] = shortcuts, _a), customTabs.get());
        return getHelpTabs(editor).fold(function () {
            return getNamesFromTabs(tabs);
        }, function (tabsFromSettings) {
            return parseHelpTabsSetting(tabsFromSettings, tabs);
        });
    };
    var init = function (editor, customTabs) {
        return function () {
            var _a = parseCustomTabs(editor, customTabs), tabs = _a.tabs, names = _a.names;
            var foundTabs = map(names, function (name) {
                return get$1(tabs, name);
            });
            var dialogTabs = cat(foundTabs);
            var body = {
                type: 'tabpanel',
                tabs: dialogTabs
            };
            editor.windowManager.open({
                title: 'Help',
                size: 'medium',
                body: body,
                buttons: [{
                    type: 'cancel',
                    name: 'close',
                    text: 'Close',
                    primary: true
                }],
                initialData: {}
            });
        };
    };

    function Plugin() {
        global.add('help2', function (editor) {
            var customTabs = Cell({});
            var api = get(customTabs);
            var dialogOpener = init(editor, customTabs);
            Buttons.register(editor, dialogOpener);
            Commands.register(editor, dialogOpener);
            editor.shortcuts.add('Alt+0', 'Open help dialog', 'mceHelp');
            return api;
        });
    }

    Plugin();

}());
